name: CI
on:
  push:
    branches:
      - main
    tags: ['*']
  pull_request:
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions: # needed to allow julia-actions/cache to proactively delete old caches that it has created
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        julia-version:
          - '1.10'
          - '1'
        os:
          - ubuntu-latest
        arch:
          - x64
    env:
      DATADEPS_ALWAYS_ACCEPT: true
      CONDA_JL_HOME: "/home/runner/miniconda/envs/conda_jl"
    steps:
      # - uses: mamba-org/setup-micromamba@v2
      #   with:
      #     micromamba-binary-path: ${{ runner.temp }}/bin/conda
      # - name: Mamba/conda environment
      #   shell: bash
      #   run: ${{ runner.temp }}/bin/conda create -p /home/runner/miniconda/envs/conda_jl python=3.10 matplotlib
      - name: Install matplotlib
        run: if [ "$RUNNER_OS" = "Linux" ]; then sudo apt-get install -y python3-matplotlib; fi
        shell: bash
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - name: Configure test environment
        shell: julia --color=yes {0}
        run: |
          using Pkg
          Pkg.develop(PackageSpec(path=pwd()))
          Pkg.instantiate()
          Pkg.add(name="OpenSSL_jll", version="3.0")
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      actions: write # needed to allow julia-actions/cache to proactively delete old caches that it has created
      contents: write
      statuses: write
    steps:
      - name: Install matplotlib
        run: if [ "$RUNNER_OS" = "Linux" ]; then sudo apt-get install -y python3-matplotlib; fi
        shell: bash
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
          arch: x64
          os: ubuntu-latest
      - uses: julia-actions/cache@v2
      - name: Configure doc environment
        shell: julia --project=docs --color=yes {0}
        run: |
          using Pkg
          Pkg.develop(PackageSpec(path=pwd()))
          Pkg.instantiate()
          Pkg.add(name="OpenSSL_jll", version="3.0")
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
      - name: Run doctests
        shell: julia --project=docs --color=yes {0}
        run: |
          using Documenter: DocMeta, doctest
          using HyperGraphNeuralNetworks
          DocMeta.setdocmeta!(HyperGraphNeuralNetworks, :DocTestSetup, :(using HyperGraphNeuralNetworks); recursive=true)
          doctest(HyperGraphNeuralNetworks)
